/*
Deployment script for dbdeliveryservice

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "dbdeliveryservice"
:setvar DefaultFilePrefix "dbdeliveryservice"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[login]...';


GO
CREATE TABLE [dbo].[login] (
    [token]           NVARCHAR (256) NOT NULL,
    [iduser]          INT            NOT NULL,
    [crate_timestamp] DATETIME       NOT NULL,
    CONSTRAINT [PK_login] PRIMARY KEY CLUSTERED ([token] ASC)
);


GO
PRINT N'Creating [dbo].[points]...';


GO
CREATE TABLE [dbo].[points] (
    [id]                INT           NOT NULL,
    [point_code]        NVARCHAR (32) NOT NULL,
    [point_description] NVARCHAR (64) NOT NULL,
    [iduser]            INT           NOT NULL,
    CONSTRAINT [PK_points] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[points].[U01_points]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [U01_points]
    ON [dbo].[points]([point_code] ASC);


GO
PRINT N'Creating [dbo].[route_points]...';


GO
CREATE TABLE [dbo].[route_points] (
    [id]          INT IDENTITY (1, 1) NOT NULL,
    [idroute]     INT NOT NULL,
    [fromidpoint] INT NOT NULL,
    [toidpoint]   INT NOT NULL,
    [rp_cost]     INT NOT NULL,
    [rp_time]     INT NOT NULL,
    [iduser]      INT NOT NULL,
    CONSTRAINT [PK_route_points] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[route_points].[K01_route_points]...';


GO
CREATE NONCLUSTERED INDEX [K01_route_points]
    ON [dbo].[route_points]([fromidpoint] ASC, [toidpoint] ASC, [idroute] ASC);


GO
PRINT N'Creating [dbo].[routes]...';


GO
CREATE TABLE [dbo].[routes] (
    [id]                INT           NOT NULL,
    [route_code]        NVARCHAR (32) NOT NULL,
    [route_description] NVARCHAR (64) NOT NULL,
    [iduser]            INT           NOT NULL,
    CONSTRAINT [PK_routes] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[routes].[U01_routes]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [U01_routes]
    ON [dbo].[routes]([route_code] ASC);


GO
PRINT N'Creating [dbo].[users]...';


GO
CREATE TABLE [dbo].[users] (
    [id]       INT            NOT NULL,
    [login]    NVARCHAR (32)  NOT NULL,
    [password] NVARCHAR (32)  NOT NULL,
    [name]     NVARCHAR (64)  NOT NULL,
    [email]    NVARCHAR (128) NOT NULL,
    [is_admin] BIT            NOT NULL,
    [iduser]   INT            NOT NULL,
    CONSTRAINT [PK_users] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[users].[U01_users]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [U01_users]
    ON [dbo].[users]([login] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[login]...';


GO
ALTER TABLE [dbo].[login]
    ADD DEFAULT (getdate()) FOR [crate_timestamp];


GO
PRINT N'Creating unnamed constraint on [dbo].[points]...';


GO
ALTER TABLE [dbo].[points]
    ADD DEFAULT ((-999)) FOR [iduser];


GO
PRINT N'Creating unnamed constraint on [dbo].[route_points]...';


GO
ALTER TABLE [dbo].[route_points]
    ADD DEFAULT ((-999)) FOR [iduser];


GO
PRINT N'Creating unnamed constraint on [dbo].[routes]...';


GO
ALTER TABLE [dbo].[routes]
    ADD DEFAULT ((-999)) FOR [iduser];


GO
PRINT N'Creating unnamed constraint on [dbo].[users]...';


GO
ALTER TABLE [dbo].[users]
    ADD DEFAULT ((0)) FOR [is_admin];


GO
PRINT N'Creating unnamed constraint on [dbo].[users]...';


GO
ALTER TABLE [dbo].[users]
    ADD DEFAULT ((-999)) FOR [iduser];


GO
PRINT N'Creating [dbo].[FK_login_iduser]...';


GO
ALTER TABLE [dbo].[login]
    ADD CONSTRAINT [FK_login_iduser] FOREIGN KEY ([iduser]) REFERENCES [dbo].[users] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_points_iduser]...';


GO
ALTER TABLE [dbo].[points]
    ADD CONSTRAINT [FK_points_iduser] FOREIGN KEY ([iduser]) REFERENCES [dbo].[users] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_route_points_fromidpoint]...';


GO
ALTER TABLE [dbo].[route_points]
    ADD CONSTRAINT [FK_route_points_fromidpoint] FOREIGN KEY ([fromidpoint]) REFERENCES [dbo].[points] ([id]);


GO
PRINT N'Creating [dbo].[FK_route_points_idroute]...';


GO
ALTER TABLE [dbo].[route_points]
    ADD CONSTRAINT [FK_route_points_idroute] FOREIGN KEY ([idroute]) REFERENCES [dbo].[routes] ([id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_route_points_iduser]...';


GO
ALTER TABLE [dbo].[route_points]
    ADD CONSTRAINT [FK_route_points_iduser] FOREIGN KEY ([iduser]) REFERENCES [dbo].[users] ([id]);


GO
PRINT N'Creating [dbo].[FK_route_points_toidpoint]...';


GO
ALTER TABLE [dbo].[route_points]
    ADD CONSTRAINT [FK_route_points_toidpoint] FOREIGN KEY ([toidpoint]) REFERENCES [dbo].[points] ([id]);


GO
PRINT N'Creating [dbo].[FK_routes_iduser]...';


GO
ALTER TABLE [dbo].[routes]
    ADD CONSTRAINT [FK_routes_iduser] FOREIGN KEY ([iduser]) REFERENCES [dbo].[users] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[TmpWays]...';


GO
CREATE FUNCTION [dbo].[TmpWays] ()
RETURNS 
@TmpWays TABLE
(	
    origin 		VARCHAR(32),
	destination	VARCHAR(32),
	fromidpoint INT,
	toidpoint 	INT,
	rp_cost 	INT,
	rp_time 	INT
)
AS 
BEGIN

	INSERT INTO @TmpWays (origin, destination, fromidpoint, toidpoint, rp_cost, rp_time)
	select	a.point_code, d.point_code,
			b.fromidpoint, b.toidpoint, b.rp_cost, b.rp_time
	from [dbo].route_points b, [dbo].[points] a, [dbo].[routes] c, [dbo].[points] d
	where a.id = b.fromidpoint
	and c.id = b.idroute
	and d.id = b.toidpoint;
	RETURN
	
END
GO
PRINT N'Creating [dbo].[GetWay]...';


GO
CREATE FUNCTION [dbo].[GetWay]
(     
      @start_point	VARCHAR(32),
      @end_point	VARCHAR(32),
	  @sort_by		VARCHAR(4)
)
RETURNS 
@GetWay TABLE
(	
    origin 		VARCHAR(32),
	destination VARCHAR(32),
	w_path		VARCHAR(8000),
	fromidpoint INT,
	toidpoint 	INT,
	rp_value 	INT
)
AS 
BEGIN
	;WITH 	CTE1 		(origin, destination, w_path, fromidpoint, toidpoint, rp_value)
			AS 	(
					select 
						origin, 
						destination, 
						cast(origin as varchar(8000)), 
						fromidpoint, 
						toidpoint, 
						CASE WHEN @sort_by = 'cost' then rp_cost else rp_time END
					from [dbo].TmpWays()
				),

			SRCURSCTE 	(origin, destination, w_path, fromidpoint, toidpoint, rp_value)
			AS 	(
					select 
						origin, 
						destination, 
						w_path, 
						fromidpoint, 
						toidpoint, 
						rp_value
                    from CTE1
					where origin = @start_point
					
					UNION ALL
					
					select 
						a.origin,
						b.destination,						
						cast(a.w_path + '->' + b.origin + CASE WHEN b.destination = @end_point THEN '->' + b.destination ELSE '' END as varchar(8000)),
						b.fromidpoint, b.toidpoint, 
						a.rp_value + CASE WHEN b.origin = @end_point THEN 0 ELSE b.rp_value END
						from SRCURSCTE a,CTE1 b
						where a.toidpoint = b.fromidpoint
						and a.origin != @end_point					
				)

	

	INSERT INTO @GetWay (origin, destination, w_path, fromidpoint, toidpoint, rp_value)
	select 
		DISTINCT
		origin, destination, w_path, fromidpoint, toidpoint, rp_value
	FROM SRCURSCTE
	WHERE destination = @end_point
	AND LEN(w_path) - LEN(REPLACE(w_path,'->','')) > 2
	OPTION (MAXRECURSION 3660);
	RETURN
	
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [dbo].[users] ([id], [login], [password], [name], [email], [is_admin]) 
VALUES
(-999, 'sa', CONVERT(VARCHAR(256), HashBytes('MD5', 'ReD'), 2), 'System Administrator', 'jorge.fonseca.silva@gmail.com', 1)

INSERT INTO [dbo].[login] ([token], [iduser]) 
VALUES
(CONVERT(VARCHAR(256), HashBytes('SHA2_256', '0123456789 9876543210 ReD'), 2), -999)

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(1, 'A', 'A')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(2, 'B', 'B')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(3, 'C', 'C')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(4, 'D', 'D')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(5, 'E', 'E')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(6, 'F', 'F')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(7, 'G', 'G')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(8, 'H', 'H')

INSERT INTO [dbo].[points] ([id], [point_code], [point_description]) 
VALUES
(9, 'I', 'I');

INSERT INTO [dbo].[routes] ([id], [route_code], [route_description]) 
VALUES
(1, 'A-C-B', 'A-C-B')

INSERT INTO [dbo].[routes] ([id], [route_code], [route_description]) 
VALUES
(2, 'A-E-D', 'A-E-D')

INSERT INTO [dbo].[routes] ([id], [route_code], [route_description]) 
VALUES
(3, 'D-F', 'D-F')

INSERT INTO [dbo].[routes] ([id], [route_code], [route_description]) 
VALUES
(4, 'F-I-B', 'F-I-B')

INSERT INTO [dbo].[routes] ([id], [route_code], [route_description]) 
VALUES
(5, 'F-G-B', 'F-G-B')

INSERT INTO [dbo].[routes] ([id], [route_code], [route_description]) 
VALUES
(6, 'A-H-E-D', 'A-H-E-D')

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(1, 1, 3, 10000, 1)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(1, 3, 2, 12, 1)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(4, 6, 9, 50, 45)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(4, 9, 2, 5, 55)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(5, 6, 7, 50, 40)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(5, 7, 2, 73, 64)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(2, 1, 5, 5, 30)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(2, 5, 4, 5, 3)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(6, 1, 8, 1, 10)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(6, 8, 5, 1, 30)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(6, 5, 4, 5, 3)

INSERT INTO [dbo].[route_points] ([idroute], [fromidpoint], [toidpoint], [rp_cost], [rp_time]) 
VALUES
(3, 4, 6, 50, 5)
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
